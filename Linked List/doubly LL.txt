#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node*next;
    struct node*prev;
}*start=NULL,*ptr,*end=NULL;

void insertend(int x)
{
    struct node*newnode;
    newnode=(struct node*)malloc(sizeof(struct node));
    newnode->next=NULL;
    newnode->prev=NULL;
    newnode->data=x;
    
    if(start==NULL)
    {
        start=newnode;
        
    }
    else
    {
        ptr=start;
        while(ptr->next!=NULL)
        {
            ptr=ptr->next;
        }
        newnode->prev=ptr;
        ptr->next=newnode;

    }
    
}

void insertbeg(int x)
{
    struct node*newnode;
    newnode=(struct node*)malloc(sizeof(struct node));
    newnode->next=NULL;
    newnode->prev=NULL;
    newnode->data=x;
    if(start==NULL)
    {
        start=newnode;
        
    }
    else
    {
        newnode->next=start;
        start->prev=newnode;
        start=newnode;
        
    }
    
    
}

void deletebeg()
{
  if(start==NULL)
  {
      printf("Empty");
  }
  else
  {
      ptr=start;
      start=ptr->next;
      start->prev=NULL;
      free(ptr);
  }
  
    
}
void deleteend()
{
    struct node*preptr;
    if(start==NULL)
    {
        printf("Empty");
    }
    else
    {
        ptr=start;
        preptr=ptr;
        while(ptr->next=NULL)
        {
            preptr=ptr;
            ptr=ptr->next;
        }
        free(ptr);
        preptr->next=NULL;
    }
}

void display()
{
    ptr=start;
    if(start==NULL)
    {
        printf("DLL empty");
        
    }
    else
    {
        while(ptr!=NULL)
        {
            printf("%d\t",ptr->data);
            ptr=ptr->next;
        }
    }
}

void insertany(int x,int o)
{
    struct node*newnode;
    newnode=(struct node*)malloc(sizeof(struct node));
    newnode->next=NULL;
    newnode->data=x;
    if(start==NULL)
    {
        start=newnode;
    }
    else
    {
        ptr=start;
        while(ptr->data!=o)
        {
            ptr=ptr->next;
        }
        newnode->next=ptr->next;
         newnode->prev=ptr;
         ptr->next->prev=newnode;
        ptr->next=newnode;
       
    }
}

void deleteany(int x)
{
  struct node*preptr;
  ptr=start;
  preptr=ptr;
  if(start==NULL)
  {
      printf("DL empty");
      
  }
  else
  {
      while(ptr->data!=x)
      {
          preptr=ptr;
          ptr=ptr->next;
      }
      preptr->next=ptr->next;
      ptr->next->prev=preptr;
      free(ptr);
  }
}



void main()
{
    int c,n,h,o;
    do{
    printf("Menu\n1.Insert from front\t2.Insert from back\t3.Insert from any\t4.Delete from front\t5.Delete from back\t6.Delete from any\t7.Display");
    scanf("%d",&c);
    if(c==1)
    {
        printf("Enter the element:");
        scanf("%d",&n);
        insertbeg(n);
    }
    if(c==2)
    {
        printf("Enter the element:");
        scanf("%d",&n);
        insertend(n);
    }
    if(c==7)
    {
        display();
    }
    if(c==4)
    {
        deletebeg();
    }
    if(c==5)
    {
      deleteend();  
    }
    if(c==3)
    {
        printf("Enter the element:");
        scanf("%d",&n);
        printf("Enter the element after which you need to insert");
        scanf("%d",&o);
        insertany(n,o);
    }
    if(c==6)
    {
        printf("Enter the element which you need to delete:");
        scanf("%d",&o);
        deleteany(o);
    }
    printf("\nDo you wish to continue\t1.Yes\t2.No");
    scanf("%d",&h);
    }while(h==1);
}