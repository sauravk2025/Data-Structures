#include<stdio.h>
#include<stdlib.h>
struct node
{
  int vertex;
  int status;
  struct node*next;
}*vlist[100],*ptr,*newnode;

int top=-1,stack[100],y,x,z[100],k,n,j=0,q[100],front=-1,rear=-1,o[100],l=0;

void create(struct node*ptr1,int a1[],int j1)
{
    newnode=(struct node*)malloc(sizeof(struct node));
    newnode->next=NULL;
    newnode->vertex=a1[j1];
    while(ptr1->next!=NULL)
    {
        ptr1=ptr1->next;
    }
    ptr1->next=newnode;
}



void displaymatrix(int b[100][100])
{
    int i,j;
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
        {
            printf("%d\t",b[i][j]);
        }
        printf("\n");
    }
}


void displaylist(struct node*vlist1[])
{
    int i;
    for(i=0;i<n;i++)
    {
        ptr=vlist1[i];
        while(ptr->next!=NULL)
        {
            printf("%d->",ptr->vertex);
            ptr=ptr->next;
        }
        printf("%d",ptr->vertex);
        printf("\n");
    }
}


int popdfs()
{
    struct node*ptr2;
    int i=0;
    if(top<0)
    {
        printf("Stack empty");
        return -1;
    }
    else
    {
    y=stack[top];
    
    printf("\nPopped elemnt :%d",stack[top]);
    
    top--;
    for(i=0;i<n;i++)
   {
      ptr2=vlist[i];
      while(ptr2!=NULL)
      {
          if(ptr2->vertex==y)
          {
              ptr2->status=3;
          }
          ptr2=ptr2->next;
      }
      
    }
    return y; 
    }
    
}


void pushdfs(int el1)
{
    struct node*ptr1;
    int i;
   top++;
   stack[top]=el1;
   printf("\nPushed element:%d",stack[top]);
   
   for(i=0;i<n;i++)
   {
      ptr1=vlist[i];
      while(ptr1!=NULL)
      {
          if(ptr1->vertex==el1)
          {
              ptr1->status=2;
          }
          ptr1=ptr1->next;
      }
      
    }
}



void dfs()
{
   
    int i,el=0;
    //printf("hi");
    for(i=0;i<n;i++)
    {
        ptr=vlist[i];
        
        while(ptr!=NULL)
        {
            ptr->status=1;
            ptr=ptr->next;
        }
        
    }
       
    ptr=vlist[0];
    el=ptr->vertex;
    pushdfs(el);
    
     while(top!=-1)
     {   
        x=popdfs();
       for(i=0;i<n;i++)
      {
        ptr=vlist[i];
        
        if(ptr->vertex==x)
        {
            break;
        }
      }
         
        if (x!=-1)
        {
          z[j]=x;
          printf("\nArray contains :%d",z[j]);
          j++;
          
        }
        
         while(ptr!=NULL)
        {
            ptr=ptr->next;
            if(ptr!=NULL)
            {
                el=ptr->vertex;
                printf("\nVertex :%d",ptr->vertex);
                if(ptr->status==1)
                {
                    pushdfs(el);
                }
            }
            
            else
            {
                continue;
            }
        }
    }
        
}




void displaydfs()
{
    int i;
    printf("\nStack order:");
    for(i=0;i<j;i++)
    {
        printf("%d\t",z[i]);
    }
}




void pushbfs(int el1)
{
    struct node*ptr3;
    int i;
    if(front==-1 && rear==-1)
    {
        front++;
        rear++;
        q[rear]=el1;
        printf("\nQueue contains :%d",q[rear]);
    }
    else if(front==rear)
    {
          rear++;
        q[rear]=el1;
         printf("\nQueue contains :%d",q[rear]);
    }
    
    else
    {
        rear++;
        q[rear]=el1;
         printf("\nQueue contains :%d",q[rear]);
    }
    
      
   for(i=0;i<n;i++)
   {
      ptr3=vlist[i];
      while(ptr3!=NULL)
      {
          if(ptr3->vertex==el1)
          {
             ptr3->status=2;
          }
          ptr3=ptr3->next;
      }
      
    }
    
}


int popbfs()
{
    struct node*ptr4;
    int i;
    if(front==-1)
    {
        return -1;
    }
    else if(front==rear)
    {
        y=q[front];
        printf("\nPopped element is %d",q[front]);
        front++;
    }
    else 
    {
        y=q[front];
        printf("\nPopped element is %d",q[front]);
        front++;
        
         for(i=0;i<n;i++)
        {
         ptr4=vlist[i];
             while(ptr4!=NULL)
                {
                 if(ptr4->vertex==y)
                    {
                     ptr4->status=3;
                    }
                    ptr4=ptr4->next;
                }             
      
        }
        return y; 
    }
}




void bfs()
{
    int i,el=0;
    for(i=0;i<n;i++)
    {
        ptr=vlist[i];
        
        while(ptr!=NULL)
        {
            ptr->status=1;
            ptr=ptr->next;
        }
        
    }
    
    ptr=vlist[0];
    el=ptr->vertex;
    pushbfs(el);
    
    while(rear!=n-1)
    {
        x=popbfs();
    for(i=0;i<n;i++)
      {
        ptr=vlist[i];
        
        if(ptr->vertex==x)
        {
            break;
        }
      }
      
       if (x!=-1)
        {
          o[l]=x;
          printf("\nArray contains %d",o[l]);
          l++;
        }
      
      
         while(ptr!=NULL)
        {
            ptr=ptr->next;
            if(ptr!=NULL)
            {
                el=ptr->vertex;
                printf("\nVertex is %d",ptr->vertex);
                if(ptr->status==1)
                {
                    pushbfs(el);
                }
            }
            
            else
            {
                continue;
            }
        }
    }
      
        
    }
    
    
void displaybfs()
{
   
    int i;
    printf("\nQueue order:");
    for(i=0;i<l;i++)
    {
        printf("%d\t",o[i]);
    } 
}







void main()
{
    int i,a[100],j,c,b[100][100];
    
    
    printf("Enter the number of vertices:");
    scanf("%d",&n);
    printf("Enter the vertices:");
    for(i=0;i<n;i++)
    {
        scanf("%d",&a[i]);
        newnode=(struct node*)malloc(sizeof(struct node));
        newnode->next=NULL;
        newnode->vertex=a[i];
        vlist[i]=newnode;
    }
    
    
    
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
        {
            printf("\nIs there a connection betweeen %d and %d?\n1.Yes\t2.No:",a[i],a[j]);
            scanf("%d",&c);
            if(c==1)
            {
                b[i][j]=1;
                ptr=vlist[i];
                create(ptr,a,j);
            }
            else
            {
                b[i][j]=0;
            }
        }
    }
    
    printf("Adjacency matrix:\n");
    {
        displaymatrix(b);
    }
    
    printf("Adjacency list:\n");
    {
        displaylist(vlist);
    }
    
    c=0;
    printf("Menu\n1.DFS\t2.BFS");
    scanf("%d",&c);
    
    if(c==1)
    {
        dfs();
        displaydfs();
        
    }
     if(c==2)
     {
         bfs();
         displaybfs();
     }

}
